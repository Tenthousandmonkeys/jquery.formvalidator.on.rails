h1. Simple and nice looking form validation with JQuery and Ruby on Rails

I stripped of the code from our own "webpage":www.tenhousandmonkeys.de to make it public as a jquery plugin.

There are a lot of plugins out there for form validation with javascript. But we'd like to stay with the Ruby on Rails "way of validation":http://edgeguides.rubyonrails.org/active_record_validations_callbacks.html server side. Therefore we needed jquery just for showing the user whats wrong or right with his inputs.

This plugin will send the form contents via AJAX to the server and handles the returing message ( as JSON object ).

p{color:red}. Note: This is the initial release version 1.0.0. There are no options yet. If you want to contribute, please email us.

p{color:red} Demo:
Have a look at our "page":www.tenhousandmonkeys.de/#contact-wrapper and drop us a line. 

h2. Using the plugin

This plugin will work well with forms generated by rails. Just use

<pre>
<code>
	$('#myForm').jsvalidator();
</code>
</pre>
To enable the validation. 

h2. Configuring Rails

This is simple. For our "own webpage":www.tenhousandmonkeys.de , we are using a simple model of contact messages.

<pre>
<code>
class CreateMessages < ActiveRecord::Migration
  def self.up
    create_table :messages do |t|
      t.string :name
      t.string :email
      t.string :phone
      t.text :message
      t.timestamps
    end
  end

  def self.down
    drop_table :messages
  end

end
</code>
</pre>

In the public message controller, just respond with JSON on validation failure, and plain text if everything is fine.

<pre>
<code>
class MessagesController < ApplicationController
  # POST /messages
  # POST /messages.xml
  def create
    @message = Message.new(params[:message])    
    respond_to do |format|
      if @message.save
        format.html { render :text => '<h1>Thank you!</h1><h2>We'll get back to you as soon as possible.</h2>' }
      else
        format.html { render :json => @message.errors }
      end
    end
  end
end
</code>
</pre>

Note: the do block might be a little overdone if you are not using other response formats. 

h2. Validations

Actualy, Rails is very good at validations. We are using a the standard validation models alongside an own email validator

<pre>
<code>
class Message < ActiveRecord::Base
  validates :message, :presence => true, :length => { :maximum => 5000 }
  validates :name, :presence => true, :length => { :maximum => 100 }
  validates :email, :email => true
end
</code>
</pre>

The E-Mail is "validated the simple way":http://apidock.com/rails/ActiveModel/Validations/ClassMethods/validates :

<pre>
<code>
class EmailValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value)
    record.errors[attribute] << (options[:message] || "is not an email") unless
      value =~ /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
  end
end
</code>
</pre>

h2. Validator actions

The plugin will check the message from server if it is an JSON object or not. If it is, each input field containing an error is  overlaped with a div, showing the error message from server. If not, the message is displayed overlapping the form. Fit the style to your needs.

<pre>
<code>
.field_with_errors {
  	display: none;
  	position: absolute;
	z-index:999;
	overflow: hidden;
	border: 1px solid red;
	cursor: pointer;
	text-indent: 40px;
	background: transparent url(image_path('error.png')) no-repeat;
}

.form_success {
      	display: none;
      	position: absolute;
      	overflow: hidden;
      	cursor: pointer;
      	z-index:999;     
     	h1 {
         
      	}
      	h2 {
        
      	}
}
</code>
</pre>


h2. System setup

we are running on:

* Ruby on Rails 3.1 Beta RC 5
* JQuery v1.6.1
